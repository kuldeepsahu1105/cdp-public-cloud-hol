---
- name: disable cdw data service
  hosts: localhost
  connection: local
  gather_facts: yes
  tasks:
    - name: fetching details of the cdw cluster
      cloudera.cloud.dw_cluster_info:
        env: "{{ cdp_env_name }}"
      register: dwcluster
      ignore_errors: true

    - name: fetching details of database catalog
      cloudera.cloud.dw_database_catalog_info:
        #cluster_id: "{{ dwcluster['clusters'][0]['id'] }}"
        cluster_id: "{{ dwcluster.get('clusters', [{}])[0].get('id') }}"
      register: dbcatalogstatus
      ignore_errors: true

    - name: fetching data visualization clusters
      ansible.builtin.command: |
        cdp dw list-data-visualizations --cluster-id "{{ dwcluster.get('clusters', [{}])[0].get('id') }}"
      register: datavizs
      ignore_errors: true

    - name: removing data visualization cluster
      ansible.builtin.command: |
        cdp dw delete-data-visualization --cluster-id "{{ dwcluster.get('clusters', [{}])[0].get('id') }}" --data-visualization-id "{{ item }}"
      loop: "{{ datavizs.stdout | from_json | json_query('dataVisualizations[].id') }}"
      until: datavizs.get('cluster', [{}])[0].get('status') == "Deleting"
      retries: 50
      delay: 30
      ignore_errors: true

    - name: Debugging dwcluster and dbcatalogstatus
      debug:
        msg: "dwcluster: {{ dwcluster }}, dbcatalogstatus: {{ dbcatalogstatus }}"

    - name: fetching all virtual warehouses
      cloudera.cloud.dw_virtual_warehouse_info:
        cluster_id: "{{ dwcluster.get('clusters', [{}])[0].get('id') }}"
        catalog_id: "{{ dbcatalogstatus.get('database_catalogs', [{}])[0].get('id') }}"
      register: vwarehouses
      ignore_errors: true

    - name: extract the virtual warehouse id
      ansible.builtin.set_fact:
        vw_ids: "{{ vwarehouses['virtual_warehouses'] | community.general.json_query(query_string) | default([]) }}"
      vars:
        query_string: "[].{id:id}"
      ignore_errors: true

    - name: removing virtual warehouses
      cloudera.cloud.dw_virtual_warehouse:
        cluster_id: "{{ dwcluster.get('clusters', [{}])[0].get('id') }}"
        catalog_id: "{{ dbcatalogstatus.get('database_catalogs', [{}])[0].get('id') }}"
        warehouse_id: "{{ item.id }}"
        wait: False
        state: absent
      loop: "{{ vw_ids | reverse | list }}"
      ignore_errors: true

    - name: removing cdw cluster
      cloudera.cloud.dw_cluster:
        cluster_id: "{{ dwcluster['clusters'][0]['id'] }}"
        env: "{{ cdp_env_name }}"
        wait: False
        state: absent
      ignore_errors: true
    
    - name: deactivating cdw cluster
      cloudera.cloud.dw_cluster_info:
        env: "{{ cdp_env_name }}"
      register: deactivatedw
      until: deactivatedw['clusters'] | length == 0
      retries: 50
      delay: 30
      ignore_errors: true
